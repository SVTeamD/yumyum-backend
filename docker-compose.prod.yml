version: "3"

networks:
  mynet:
    driver: bridge

services:
  mysql:
    container_name: sem_mysql
    image: mysql:latest
    volumes:
      - mysql_data_dev:/var/lib/mysql
    environment:
      MYSQL_DATABASE: dev_db
      MYSQL_ROOT_PASSWORD: root
    restart: always
    ports:
      - 3306:3306
    networks:
      - mynet
    logging:
      driver: "json-file"
      options:
        max-size: "10k"
        max-file: "10"

  backend:
    container_name: backend
    build: ./backend
    restart: always
    ports:
      - 8000:8000
    command: >
      ash -c "python wait_for_mysql.py  && uvicorn main:app --host 0.0.0.0 --reload"
    volumes:
      - ./backend/:/backend/
    expose:
      - 8000
    # env_file:
    #   - ./settings/dev/.env.dev
    networks:
      - mynet
    depends_on:
      - mysql

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    container_name: sem_elasticsearch
    # restart: on-failure
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./volumes/elasticsearch:/usr/share/elasticsearch/data
    logging:
      driver: "json-file"
      options:
        max-size: "10k"
        max-file: "10"
  logstash:
    build:
      context: .
      dockerfile: Dockerfile-logstash
    container_name: sem_logstash
    # restart: on-failure
    depends_on:
      - mysql
      - elasticsearch
    volumes:
      - ./volumes/logstash/pipeline/:/usr/share/logstash/pipeline/
      - ./volumes/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./volumes/logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ./volumes/logstash/config/queries/:/usr/share/logstash/config/queries/
    logging:
      driver: "json-file"
      options:
        max-size: "10k"
        max-file: "10"
  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    container_name: sem_kibana
    environment:
      - "ELASTICSEARCH_URL=http://elasticsearch:9200"
      - "SERVER_NAME=127.0.0.1"
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch

  nginx:
    container_name: proxy_server
    image: nginx:1.23-alpine
    extra_hosts:
      - host.docker,internal:host-gateway
    ports:
      - 80:80
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - mynet
    depends_on:
      - backend

  node-exporter:
    container_name: node-exporter
    image: quay.io/prometheus/node-exporter:latest
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points"
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - 9100:9100
    expose:
      - 9100
    networks:
      - mynet
    pid: host
    restart: unless-stopped

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - 8080:8080
    networks:
      - mynet
    privileged: true
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - mynet
    restart: always
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus/data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    ports:
      - 9090:9090
    expose:
      - 9090
    networks:
      - mynet
    restart: always

  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    ports:
      - 3000:3000
    expose:
      - 3000
    networks:
      - mynet
    restart: always

volumes:
  mysql_data_dev: null
